/**
 * subscribe std_msgs::Joy and control the left motor
 sleep is required to generate pwm signal. To avoid interference between two sigals, seperate nodes are used to deal
 with two motors
 for asv.launch. but not right due to the conflict of init.
 */

#include "ros/ros.h"
//#include <std_msgs/Float64MultiArray.h>
#include <std_msgs/Float64.h>
#include "std_msgs/Int8.h"
extern "C" {
#include <stdio.h>
#include <getopt.h>
#include <signal.h>
#include <stdlib.h>  // for atoi() and exit()
#include <rc/time.h>
#include <rc/gpio.h>
#include <rc/adc.h>
#include <signal.h>
#include <rc/dsm.h>
#include <rc/servo.h>
}
int frequency = 100,l_reverse=0;  // set the frequency of the pwm
int period = 1000000 / frequency;
float leftduty = 0, dt,ct;
// get in to the callback when message is received
void rpmCallback(const std_msgs::Float64::ConstPtr& control_effort)
{
	//ROS_INFO("control_effort->data: [%f]", control_effort->data);
	ROS_INFO("dtttttttt: [%f]", dt);
	leftduty = leftduty+(control_effort->data)/100.00*dt;
  if (leftduty>=1)
  {
	  leftduty=1;
  }
  if (leftduty<=0)
  {
	  leftduty=0;
  }
  ROS_INFO("leftduty: [%f]", leftduty);
}
void lioCallback(const std_msgs::Int8::ConstPtr& msg)
{
  //ROS_INFO("I heard: [%d]", msg->data);
	if(msg->data==1){   //reverse
		  l_reverse=1;
		  //sleep(1);
	}
	if(msg->data==0){
		 l_reverse=0;
		 //sleep(1);
	}
}
void MySigintHandler(int sig)
{
  //这里主要进行退出前的数据保存、内存清理、告知其他节点等工作
  ROS_INFO("shutting down!");
  rc_servo_cleanup();
  rc_gpio_cleanup(1, 25);
  ros::shutdown();
}

int main(int argc, char** argv)
{
  // initiate pwm;
	//ROS_INFO("000000000000");
  rc_servo_init();
  //ROS_INFO("1111111111");
  usleep(100000);
  // initiate 4 gpios
  if (rc_gpio_init(1, 25, GPIOHANDLE_REQUEST_OUTPUT) == -1)
  {
    printf("rc_gpio_init failed\n");
    return -1;
  }
  /*          if(rc_gpio_init(3, 20, GPIOHANDLE_REQUEST_OUTPUT)==-1){
     printf("rc_gpio_init failed\n");
     return -1;
     }
              if(rc_gpio_init(3, 17, GPIOHANDLE_REQUEST_OUTPUT)==-1){
     printf("rc_gpio_init failed\n");
     return -1;
     } */
  //ROS_INFO("22222222222");
  ros::init(argc, argv, "set_left_pwm");
  // ros::init(argc, argv, "leftmotor");

  ros::NodeHandle nh;
  ros::Rate loop_rate(frequency);
  ros::Subscriber sub1 = nh.subscribe("l_reverse", 2, lioCallback);
  ros::Subscriber sub = nh.subscribe("leftpwm", 2, rpmCallback);
  //ROS_INFO("saaaaaaaa");
  signal(SIGINT, MySigintHandler);
  // subscribe joy joy topic and start callback function
  while (ros::ok())
  {
	  //ROS_INFO("bbbbbbbbbbb");
		if(l_reverse==1){   //reverse
			  rc_gpio_set_value(1, 25, 1);
				ROS_INFO("lllllreverse");
		}
		if(l_reverse==0){
			  rc_gpio_set_value(1, 25, 0);
		}
		if(l_reverse==3){
			leftduty=0;
			ROS_INFO("zero_outputtttt");
		}
	  // send pwm adjust command
	rc_servo_send_pulse_us(1, (int)(leftduty * period));
	ROS_INFO("sendleftduty: [%f], [%d]", leftduty,(int)(leftduty * period));
	dt = ((float)rc_nanos_since_boot() - (float)ct) / 1000000000.00;
    ros::spinOnce();
    ct = rc_nanos_since_boot();
    loop_rate.sleep();
    //count = ++;
  }
  return 0;
    //count = ++;
}
